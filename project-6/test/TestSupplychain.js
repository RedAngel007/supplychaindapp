// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain');

contract('SupplyChain', function (accounts) {
  // Declare few constants and assign a few sample accounts generated by ganache-cli
  var sku = 1;
  var upc = 1;
  const ownerID = accounts[0];
  const originFarmerID = accounts[1];
  const originFarmName = 'John Doe';
  const originFarmInformation = 'Yarray Valley';
  const originFarmLatitude = '-38.239770';
  const originFarmLongitude = '144.341490';
  var productID = Number(sku) + Number(upc);
  const productNotes = 'Best beans for Espresso';
  const productPrice = web3.utils.toWei('1', 'ether');
  var itemState = 0;
  const distributorID = accounts[2];
  const retailerID = accounts[3];
  const consumerID = accounts[4];
  const emptyAddress = '0x00000000000000000000000000000000000000';

  ///Available Accounts
  ///==================
  ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
  ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
  ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
  ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
  ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
  ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
  ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
  ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
  ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
  ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

  console.log('ganache-cli accounts used here...');
  console.log('Contract Owner: accounts[0] ', accounts[0]);
  console.log('Farmer: accounts[1] ', accounts[1]);
  console.log('Distributor: accounts[2] ', accounts[2]);
  console.log('Retailer: accounts[3] ', accounts[3]);
  console.log('Consumer: accounts[4] ', accounts[4]);

  let eventEmitted;
  let harvestItem;
  let supplyChain;

  beforeEach('', async () => {
    // Declare and Initialize a variable for event
    eventEmitted = false;
    supplyChain = await SupplyChain.deployed();

    // Mark an item as Harvested by calling function harvestItem()
    harvestItem = await supplyChain.harvestItem(
      upc,
      originFarmerID,
      originFarmName,
      originFarmInformation,
      originFarmLatitude,
      originFarmLongitude,
      productNotes
    );

    // Declare and Initialize a variable for event
  });

  // 1st Test
  it('Testing smart contract function harvestItem() that allows a farmer to harvest coffee', async () => {
    const supplyChain = await SupplyChain.deployed();

    if (harvestItem.logs[0].event === 'Harvested') {
      eventEmitted = true;
    }

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
    assert.equal(
      resultBufferOne[2],
      originFarmerID,
      'Error: Missing or Invalid ownerID'
    );
    assert.equal(
      resultBufferOne[3],
      originFarmerID,
      'Error: Missing or Invalid originFarmerID'
    );
    assert.equal(
      resultBufferOne[4],
      originFarmName,
      'Error: Missing or Invalid originFarmName'
    );
    assert.equal(
      resultBufferOne[5],
      originFarmInformation,
      'Error: Missing or Invalid originFarmInformation'
    );
    assert.equal(
      resultBufferOne[6],
      originFarmLatitude,
      'Error: Missing or Invalid originFarmLatitude'
    );
    assert.equal(
      resultBufferOne[7],
      originFarmLongitude,
      'Error: Missing or Invalid originFarmLongitude'
    );
    assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State');
    assert.equal(eventEmitted, true, 'Invalid event emitted');
  });

  // 2nd Test
  it('Testing smart contract function processItem() that allows a farmer to process coffee', async () => {
    // Declare and Initialize a variable for event
    var eventEmitted = false;

    // Mark an item as Processed by calling function processtItem()
    const processItem = await supplyChain.processItem(upc, {
      from: originFarmerID,
    });

    if (processItem.logs[0].event === 'Processed') {
      eventEmitted = true;
    }

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const result = await supplyChain.fetchItem(upc);

    console.log('result', result);

    // Verify the result set
    assert.equal(result.itemState, '1', 'Error: Invalid item State');
    assert.equal(eventEmitted, true, 'Invalid event emitted');
  });

  // 3rd Test
  it('Testing smart contract function packItem() that allows a farmer to pack coffee', async () => {
    // Mark an item as Processed by calling function processtItem()
    await supplyChain.processItem(upc, {
      from: originFarmerID,
    });

    // Mark an item as Processed by calling function packItem()
    const packItem = await supplyChain.packItem(upc, {
      from: originFarmerID,
    });

    if (packItem.logs[0].event === 'Packed') {
      eventEmitted = true;
    }

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const result = await supplyChain.fetchItem(upc);

    // Verify the result set
    assert.equal(result.itemState, '2', 'Error: Invalid item State');
    assert.equal(eventEmitted, true, 'Invalid event emitted');
  });

  // 4th Test
  it('Testing smart contract function sellItem() that allows a farmer to sell coffee', async () => {
    // Mark an item as Processed by calling function processtItem()
    await supplyChain.processItem(upc, {
      from: originFarmerID,
    });

    // Mark an item as Processed by calling function packItem()
    await supplyChain.packItem(upc, {
      from: originFarmerID,
    });

    let sellItem = await supplyChain.sellItem(upc, productPrice, {
      from: originFarmerID,
    });

    if (sellItem.logs[0].event === 'ForSale') {
      eventEmitted = true;
    }

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const result = await supplyChain.fetchItem(upc);

    // Verify the result set
    assert.equal(result.itemState, '3', 'Error: Invalid item State');
    assert.equal(eventEmitted, true, 'Invalid event emitted');
  });

  // 5th Test
  it('Testing smart contract function buyItem() that allows a distributor to buy coffee', async () => {
    // Mark an item as Processed by calling function processtItem()
    await supplyChain.processItem(upc, {
      from: originFarmerID,
    });

    // Mark an item as Processed by calling function packItem()
    await supplyChain.packItem(upc, {
      from: originFarmerID,
    });

    await supplyChain.sellItem(upc, productPrice, {
      from: originFarmerID,
    });

    let boughtItem = await supplyChain.buyItem(upc, {
      from: distributorID,
      value: productPrice,
    });

    if (boughtItem.logs[0].event === 'Sold') {
      eventEmitted = true;
    }

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const result = await supplyChain.fetchItem(upc);

    // Verify the result set
    assert.equal(
      result.distributorID,
      distributorID,
      'Error: Invalid distributor ID'
    );
    assert.equal(result.ownerID, distributorID, 'Error: Invalid owner ID');
    assert.equal(result.itemState, '4', 'Error: Invalid item State');
    assert.equal(eventEmitted, true, 'Invalid event emitted');
  });

  // 6th Test
  it('Testing smart contract function shipItem() that allows a distributor to ship coffee', async () => {
    // Mark an item as Processed by calling function processtItem()
    await supplyChain.processItem(upc, {
      from: originFarmerID,
    });

    // Mark an item as Processed by calling function packItem()
    await supplyChain.packItem(upc, {
      from: originFarmerID,
    });

    await supplyChain.sellItem(upc, productPrice, {
      from: originFarmerID,
    });

    await supplyChain.buyItem(upc, {
      from: distributorID,
      value: productPrice,
    });

    let shipItem = await supplyChain.shipItem(upc, {
      from: distributorID,
    });

    // Mark an item as Sold by calling function shipItem(

    if (shipItem.logs[0].event === 'Shipped') {
      eventEmitted = true;
    }
    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const result = await supplyChain.fetchItem(upc);

    // Verify the result set
    assert.equal(
      result.distributorID,
      distributorID,
      'Error: Invalid distributor ID'
    );
    assert.equal(result.ownerID, distributorID, 'Error: Invalid owner ID');
    assert.equal(result.itemState, '5', 'Error: Invalid item State');
    assert.equal(eventEmitted, true, 'Invalid event emitted');
  });

  // 7th Test
  it('Testing smart contract function receiveItem() that allows a retailer to mark coffee received', async () => {
    // Retrieve the just now saved item from blockchain by calling function fetchItem()

    // Verify the result set

    // Mark an item as Processed by calling function processtItem()
    await supplyChain.processItem(upc, {
      from: originFarmerID,
    });

    // Mark an item as Processed by calling function packItem()
    await supplyChain.packItem(upc, {
      from: originFarmerID,
    });

    await supplyChain.sellItem(upc, productPrice, {
      from: originFarmerID,
    });

    await supplyChain.buyItem(upc, {
      from: distributorID,
      value: productPrice,
    });

    await supplyChain.shipItem(upc, {
      from: distributorID,
    });

    let receivedItem = await supplyChain.receiveItem(upc, {
      from: retailerID,
    });

    // Mark an item as Sold by calling function shipItem(
    if (receivedItem.logs[0].event === 'Received') {
      eventEmitted = true;
    }

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const result = await supplyChain.fetchItem(upc);

    // Verify the result set
    assert.equal(result.retailerID, retailerID, 'Error: Invalid Retailer ID');
    assert.equal(result.ownerID, distributorID, 'Error: Invalid owner ID');
    assert.equal(result.itemState, '6', 'Error: Invalid item State');
    assert.equal(eventEmitted, true, 'Invalid event emitted');
  });

  // 8th Test
  it('Testing smart contract function purchaseItem() that allows a consumer to purchase coffee', async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event

    // Watch the emitted event Purchased()

    // Mark an item as Sold by calling function purchaseItem()

    // Retrieve the just now saved item from blockchain by calling function fetchItem()

    // Verify the result set
    await supplyChain.processItem(upc, {
      from: originFarmerID,
    });

    // Mark an item as Processed by calling function packItem()
    await supplyChain.packItem(upc, {
      from: originFarmerID,
    });

    await supplyChain.sellItem(upc, productPrice, {
      from: originFarmerID,
    });

    await supplyChain.buyItem(upc, {
      from: distributorID,
      value: productPrice,
    });

    await supplyChain.shipItem(upc, {
      from: distributorID,
    });

    await supplyChain.receiveItem(upc, {
      from: retailerID,
    });

    let purchasedItem = await supplyChain.purchaseItem(upc, {
      from: consumerID,
    });

    // Mark an item as Sold by calling function shipItem(
    if (purchasedItem.logs[0].event === 'Purchased') {
      eventEmitted = true;
    }

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const result = await supplyChain.fetchItem(upc);

    // Verify the result set
    assert.equal(
      result.originFarmerID,
      originFarmerID,
      'Error: Invalid origin farmer ID'
    );
    assert.equal(
      result.distributorID,
      distributorID,
      'Error: Invalid distributor ID'
    );

    assert.equal(result.retailerID, retailerID, 'Error: Invalid Retailer ID');
    assert.equal(result.ownerID, consumerID, 'Error: Invalid owner ID');
    assert.equal(result.consumerID, consumerID, 'Error: Invalid owner ID');
    assert.equal(result.itemState, '7', 'Error: Invalid item State');
    assert.equal(eventEmitted, true, 'Invalid event emitted');
  });

  // 9th Test
  it('Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain', async () => {
    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const result = await supplyChain.fetchItemBufferOne.call(upc);
    // Verify the result set
    // assert.equal(result[0], sku, 'Error: Invalid sku');
    // assert.equal(result[1], upc, 'Error: Invalid upc');
    assert.equal(result[2], originFarmerID, 'Error: Invalid onwerId');
    assert.equal(result[3], originFarmerID, 'Error: Invalid originFarmerID');
    assert.equal(result[4], originFarmName, 'Error: Invalid originFarmName');
    assert.equal(
      result[5],
      originFarmInformation,
      'Error: Invalid originFarmInformation'
    );
    assert.equal(
      result[6],
      originFarmLatitude,
      'Error: Invalid originFarmLatitude'
    );
    assert.equal(
      result[7],
      originFarmLongitude,
      'Error: Invalid originFarmLongitude'
    );
  });

  // 10th Test
  it('Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain', async () => {
    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    await supplyChain.processItem(upc, {
      from: originFarmerID,
    });

    // Mark an item as Processed by calling function packItem()
    await supplyChain.packItem(upc, {
      from: originFarmerID,
    });

    await supplyChain.sellItem(upc, productPrice, {
      from: originFarmerID,
    });

    await supplyChain.buyItem(upc, {
      from: distributorID,
      value: productPrice,
    });

    await supplyChain.shipItem(upc, {
      from: distributorID,
    });

    await supplyChain.receiveItem(upc, {
      from: retailerID,
    });

    await supplyChain.purchaseItem(upc, {
      from: consumerID,
    });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const result2 = await supplyChain.fetchItemBufferTwo.call(upc);
    console.log('result2', Number(result2[0]));

    // Verify the result set
    assert.equal(result2[3], productNotes, 'Error: Invalid productNotes');
    assert.equal(result2[5], '7', 'Error: Invalid item state');
    assert.equal(result2[6], distributorID, 'Error: Invalid distributorID');
    assert.equal(result2[7], retailerID, 'Error: Invalid retailerID');
    assert.equal(result2[8], consumerID, 'Error: Invalid consumerID');
  });
});
